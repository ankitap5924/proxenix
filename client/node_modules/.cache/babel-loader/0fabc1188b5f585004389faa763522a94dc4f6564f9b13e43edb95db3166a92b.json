{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Aditya\\\\Desktop\\\\proxenix\\\\client\\\\src\\\\contexts\\\\SocketContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport io from 'socket.io-client';\nimport { useAuth } from './AuthContext';\nimport toast from 'react-hot-toast';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SocketContext = /*#__PURE__*/createContext();\nexport const useSocket = () => {\n  _s();\n  const context = useContext(SocketContext);\n  if (!context) {\n    throw new Error('useSocket must be used within a SocketProvider');\n  }\n  return context;\n};\n_s(useSocket, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const SocketProvider = ({\n  children\n}) => {\n  _s2();\n  const [socket, setSocket] = useState(null);\n  const [messages, setMessages] = useState([]);\n  const [users, setUsers] = useState([]);\n  const [typingUsers, setTypingUsers] = useState([]);\n  const {\n    user,\n    isAuthenticated\n  } = useAuth();\n  useEffect(() => {\n    if (isAuthenticated && user) {\n      const newSocket = io('http://localhost:5000');\n      setSocket(newSocket);\n\n      // Join chat room\n      newSocket.emit('join', {\n        userId: user.id,\n        username: user.username\n      });\n\n      // Listen for new messages\n      newSocket.on('newMessage', message => {\n        setMessages(prev => [...prev, message]);\n      });\n\n      // Listen for user online status\n      newSocket.on('userOnline', userData => {\n        setUsers(prev => {\n          const existingUser = prev.find(u => u._id === userData.userId);\n          if (existingUser) {\n            return prev.map(u => u._id === userData.userId ? {\n              ...u,\n              isOnline: true\n            } : u);\n          }\n          return [...prev, {\n            _id: userData.userId,\n            username: userData.username,\n            isOnline: true\n          }];\n        });\n        toast.success(`${userData.username} is now online`);\n      });\n\n      // Listen for user offline status\n      newSocket.on('userOffline', userData => {\n        setUsers(prev => prev.map(u => u._id === userData.userId ? {\n          ...u,\n          isOnline: false\n        } : u));\n        toast(`${userData.username} is now offline`, {\n          icon: 'ðŸ‘‹'\n        });\n      });\n\n      // Listen for online users list\n      newSocket.on('onlineUsers', onlineUsers => {\n        setUsers(prev => {\n          const updatedUsers = prev.map(u => ({\n            ...u,\n            isOnline: onlineUsers.some(online => online.username === u.username)\n          }));\n          return updatedUsers;\n        });\n      });\n\n      // Listen for typing indicators\n      newSocket.on('userTyping', data => {\n        if (data.isTyping) {\n          setTypingUsers(prev => {\n            if (!prev.includes(data.username)) {\n              return [...prev, data.username];\n            }\n            return prev;\n          });\n        } else {\n          setTypingUsers(prev => prev.filter(username => username !== data.username));\n        }\n      });\n      return () => {\n        newSocket.close();\n      };\n    }\n  }, [isAuthenticated, user]);\n  const sendMessage = content => {\n    if (socket && user) {\n      socket.emit('sendMessage', {\n        senderId: user.id,\n        content\n      });\n    }\n  };\n  const sendTypingStatus = isTyping => {\n    if (socket && user) {\n      socket.emit('typing', {\n        username: user.username,\n        isTyping\n      });\n    }\n  };\n  const value = {\n    socket,\n    messages,\n    setMessages,\n    users,\n    setUsers,\n    typingUsers,\n    sendMessage,\n    sendTypingStatus\n  };\n  return /*#__PURE__*/_jsxDEV(SocketContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 5\n  }, this);\n};\n_s2(SocketProvider, \"KNTMbMw6rmiNCwGn0b4ar7uDWRs=\", false, function () {\n  return [useAuth];\n});\n_c = SocketProvider;\nvar _c;\n$RefreshReg$(_c, \"SocketProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","io","useAuth","toast","jsxDEV","_jsxDEV","SocketContext","useSocket","_s","context","Error","SocketProvider","children","_s2","socket","setSocket","messages","setMessages","users","setUsers","typingUsers","setTypingUsers","user","isAuthenticated","newSocket","emit","userId","id","username","on","message","prev","userData","existingUser","find","u","_id","map","isOnline","success","icon","onlineUsers","updatedUsers","some","online","data","isTyping","includes","filter","close","sendMessage","content","senderId","sendTypingStatus","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Aditya/Desktop/proxenix/client/src/contexts/SocketContext.js"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState } from 'react';\r\nimport io from 'socket.io-client';\r\nimport { useAuth } from './AuthContext';\r\nimport toast from 'react-hot-toast';\r\n\r\nconst SocketContext = createContext();\r\n\r\nexport const useSocket = () => {\r\n  const context = useContext(SocketContext);\r\n  if (!context) {\r\n    throw new Error('useSocket must be used within a SocketProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const SocketProvider = ({ children }) => {\r\n  const [socket, setSocket] = useState(null);\r\n  const [messages, setMessages] = useState([]);\r\n  const [users, setUsers] = useState([]);\r\n  const [typingUsers, setTypingUsers] = useState([]);\r\n  const { user, isAuthenticated } = useAuth();\r\n\r\n  useEffect(() => {\r\n    if (isAuthenticated && user) {\r\n      const newSocket = io('http://localhost:5000');\r\n      setSocket(newSocket);\r\n\r\n      // Join chat room\r\n      newSocket.emit('join', { userId: user.id, username: user.username });\r\n\r\n      // Listen for new messages\r\n      newSocket.on('newMessage', (message) => {\r\n        setMessages(prev => [...prev, message]);\r\n      });\r\n\r\n      // Listen for user online status\r\n      newSocket.on('userOnline', (userData) => {\r\n        setUsers(prev => {\r\n          const existingUser = prev.find(u => u._id === userData.userId);\r\n          if (existingUser) {\r\n            return prev.map(u => \r\n              u._id === userData.userId ? { ...u, isOnline: true } : u\r\n            );\r\n          }\r\n          return [...prev, { _id: userData.userId, username: userData.username, isOnline: true }];\r\n        });\r\n        toast.success(`${userData.username} is now online`);\r\n      });\r\n\r\n      // Listen for user offline status\r\n      newSocket.on('userOffline', (userData) => {\r\n        setUsers(prev => \r\n          prev.map(u => \r\n            u._id === userData.userId ? { ...u, isOnline: false } : u\r\n          )\r\n        );\r\n        toast(`${userData.username} is now offline`, { icon: 'ðŸ‘‹' });\r\n      });\r\n\r\n      // Listen for online users list\r\n      newSocket.on('onlineUsers', (onlineUsers) => {\r\n        setUsers(prev => {\r\n          const updatedUsers = prev.map(u => ({\r\n            ...u,\r\n            isOnline: onlineUsers.some(online => online.username === u.username)\r\n          }));\r\n          return updatedUsers;\r\n        });\r\n      });\r\n\r\n      // Listen for typing indicators\r\n      newSocket.on('userTyping', (data) => {\r\n        if (data.isTyping) {\r\n          setTypingUsers(prev => {\r\n            if (!prev.includes(data.username)) {\r\n              return [...prev, data.username];\r\n            }\r\n            return prev;\r\n          });\r\n        } else {\r\n          setTypingUsers(prev => prev.filter(username => username !== data.username));\r\n        }\r\n      });\r\n\r\n      return () => {\r\n        newSocket.close();\r\n      };\r\n    }\r\n  }, [isAuthenticated, user]);\r\n\r\n  const sendMessage = (content) => {\r\n    if (socket && user) {\r\n      socket.emit('sendMessage', {\r\n        senderId: user.id,\r\n        content\r\n      });\r\n    }\r\n  };\r\n\r\n  const sendTypingStatus = (isTyping) => {\r\n    if (socket && user) {\r\n      socket.emit('typing', {\r\n        username: user.username,\r\n        isTyping\r\n      });\r\n    }\r\n  };\r\n\r\n  const value = {\r\n    socket,\r\n    messages,\r\n    setMessages,\r\n    users,\r\n    setUsers,\r\n    typingUsers,\r\n    sendMessage,\r\n    sendTypingStatus\r\n  };\r\n\r\n  return (\r\n    <SocketContext.Provider value={value}>\r\n      {children}\r\n    </SocketContext.Provider>\r\n  );\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}